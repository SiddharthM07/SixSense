pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "siddharth1218/sixsense:latest"
        DOCKER_CREDENTIALS = "docker-credentials"
    }

    stages {
        stage('Clone Git Repo') {
            steps {
                git branch: 'DEV', credentialsId: 'Git-login', url: 'https://github.com/SiddharthM07/SixSense.git'
            }
        }

        stage('Code Quality Check') {
            steps {
                sh 'python3 -m venv venv'
                sh 'bash -c "source venv/bin/activate && pip install flake8"'
                sh 'bash -c "source venv/bin/activate && flake8 --max-line-length=100 --exclude=venv/ ."'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $DOCKER_IMAGE -f Docker/Dockerfile .'
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: "docker-credentials", usernameVariable: "DOCKER_USER", passwordVariable: "DOCKER_PASS")]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }

        stage('Create Kubernetes Secret') {
            steps {
                withCredentials([
                    string(credentialsId: 'SUPABASE_URL', variable: 'SUPABASE_URL'),
                    string(credentialsId: 'SUPABASE_API_KEY', variable: 'SUPABASE_API_KEY'),
                    string(credentialsId: 'CRICAPI_KEY', variable: 'CRICAPI_KEY')
                ]) {
                    sh '''
                    kubectl delete secret sixsense-secrets --ignore-not-found=true
                    kubectl create secret generic sixsense-secrets \
                      --from-literal=SUPABASE_URL=$SUPABASE_URL \
                      --from-literal=SUPABASE_API_KEY=$SUPABASE_API_KEY \
                      --from-literal=CRICAPI_KEY=$CRICAPI_KEY
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                kubectl apply -f Kubernetes/deployment.yaml
                kubectl apply -f Kubernetes/service.yaml
                '''
            }
        }
    }
}
